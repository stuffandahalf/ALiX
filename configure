#!/bin/sh

#  Copyright (c) 2022 Gregory Norton <gregory.norton@me.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

# This script reads a list of variables from a configuration file
# and produces a posix compliant makefile

# functions to simplify makefile generation
log() {
	if [ $VERBOSE -ge $1 ]; then
		shift 1
		echo "$@" >&2
	fi
}

emit() {
	printf "$@"  >> "$DIR$OUT_MAKEFILE"
}

test_CC() {
	log 1 "testing $1"
}

test_LD() {
	log 1 "testing $1"
}

test_AR() {
	log 1 "testing $1"
}

src2obj() {
	for SRC in $@; do
		printf "$SRC" | sed -e "s/\..*$/\.o /"
	done
}

staticlib_fname() {
	for LIB in $@; do
		printf " lib$LIB.a"
	done
}

ldargs() {
	for LIB in $@; do
		printf "-"
		printf "l $LIB "
	done
	printf "\n"
}

# Build Variables
IN_MAKEFILE=make.conf
OUT_MAKEFILE=makefile

if [ -z "$CONFIGURED" ]; then
	TARGET=i386
	export TARGET
	VERBOSE=0
	export VERBOSE
	BUILD_PREFIX=""
	export BUILD_PREFIX

	while getopts 'T:B:vh' opt; do
	    case $opt in
	        (T) TARGET=$OPTARG;;
	        (B) BUILD_DIR=$OPTARG;;
	        (v) VERBOSE=`dc -e "$VERBOSE 1 + p"`;;
	        (h) echo "print help message";;
	    esac
	done
	CONFIGURED=1
	export CONFIGURED
fi
shift `dc -e "$OPTIND 1 - p"`

# TODO: Lookup tools
REQ_TOOLS="cc ld ar"
CC_CANDIDATES="c99 cc clang gcc $TARGET-elf-none-gcc $TARGET-elf-alix-gcc"
LD_CANDIDATES="ld bfd lld gold mold $TARGET-elf-none-bfd $TARGET-elf-alix-bfd"
AR_CANDIDATES="ar llvm-ar $TARGET-elf-none-ar $TARGET-elf-alix-ar"
for TOOL in $REQ_TOOLS; do
	TOOLVAR="`echo $TOOL | tr '[a-z]' '[A-Z]'`"
	export TOOLVAR
	echo "$TOOLVAR"
	TOOLVAL="$(eval "echo \${$TOOLVAR}")"
	if [ ! -z "$TOOLVAL" ] && "test_$TOOLVAR" "$TOOLVAL"; then
		continue
	fi

	eval "CANDIDATES=\"$(echo \${${TOOLVAR}_CANDIDATES})\""
	for DIR in `echo "$PATH" | sed -e "s/:/\n/g"`; do
		FOUND=0

        log 2 "Checking $DIR for $TOOLVAR candidates"
        for CANDIDATE in $CANDIDATES; do
            if [ -x $DIR/$CANDIDATE ] && eval "test_${TOOLVAR} '$DIR/$CANDIDATE'"; then
				TOOLVAL="$DIR/$CANDIDATE"
                eval "${TOOLVAR}=\"${TOOLVAL}\""
				export $TOOLVAR
				log 0 "Found $TOOLVAR candidate at \"$TOOLVAL\""
				FOUND=1
				break
            fi
        done
		if [ "$FOUND" -gt 0 ]; then
			break
		fi
    done

	if [ -z "$TOOLVAL" ]; then
		log 0 "Failed to find valid candidate for $TOOLVAR"
		exit 1
	fi
done

# Determine current directory
DIR="$PWD/"
if [ $# -gt 0 ]; then
	DIR="$1"
fi
# Lookup subdirectories
SUBDIRS=`ls -d "$DIR"*/ 2> /dev/null`
log 3 "Found the following subdirectories"
log 3 "$SUBDIRS"
# Recurse through subdirectories and configure them
if [ $? -eq 0 ]; then
	for SUBDIR in $SUBDIRS; do
		log 2 "ENTERING $SUBDIR"
		$0 "$SUBDIR"
		log 2 "LEAVING $SUBDIR"
	done
fi

set -e

# look for makefile configuration file

if [ ! -f "$DIR/$IN_MAKEFILE" ]; then
	exit 1
fi

# Import directory make variables as shell variables
. "$DIR/$IN_MAKEFILE"

SUBDIR_TARGETS=
for SUBDIR in $SUBDIRS; do
	SUBDIR_TARGETS="$SUBDIR_TARGETS $SUBDIR.dir"
done

log 0 "CREATING $DIR$OUT_MAKEFILE"

# create output file
if [ -e "$DIR$OUT_MAKEFILE" ]; then
	rm -f "$DIR$OUT_MAKEFILE"
fi
touch "$DIR$OUT_MAKEFILE"
BUILD_SOURCES=
BUILD_ARTIFACTS=




# write output file
emit ".POSIX:\n"
emit "\n"
emit "all: $SUBDIR_TARGETS $TARGETS `staticlib_fname $STATIC_LIB_TARGETS` $DYNAMIC_LIB_TARGETS\n"
emit "\n"
for SUBDIR in $SUBDIRS; do
	emit "$SUBDIR.dir: $SUBDIR\n"
	emit "\tcd \"$SUBDIR\" && \$(MAKE) all\n"
	emit "\n"
done
for TARGET in $TARGETS; do
	# evaluate target variables
	eval "EXTRA_DEPS=\${${TARGET}_EXTRA_DEPENDENCIES}"
	eval "SOURCES=\${${TARGET}_SOURCES}"
	eval "LDFLAGS=\${${TARGET}_LDFLAGS}"
	eval "LIBS=\${${TARGET}_LIBS}"
	eval "LIB_LOOKUP_DIRS=\${${TARGET}_LIB_LOOKUP_DIRS}"
	OBJECTS="`src2obj $SOURCES`"
	BUILD_SOURCES="$BUILD_SOURCES $SOURCES"
	BUILD_ARTIFACTS="$BUILD_ARTIFACTS $OBJECTS"

	emit "$TARGET: $STATIC_LIBS $OBJECTS $EXTRA_DEPS\n"
	emit "\t\$(CC) \$(LDFLAGS) $LDFLAGS"
	for LIB_LOOKUP_DIR in $LIB_LOOKUP_DIRS; do
		emit " -L$LIB_LOOKUP_DIR"
	done
	emit " -o$TARGET $OBJECTS"
	for LIB in $LIBS; do
		emit " -l$LIB"
	done
	emit "\n\n"
done
for STATIC_LIB in $STATIC_LIB_TARGETS; do
	# evaluate library variables
	eval "SOURCES=\${${STATIC_LIB}_SOURCES}"
	OBJECTS="`src2obj $SOURCES`"
	BUILD_SOURCES="$BUILD_SOURCES $SOURCES"
	BUILD_ARTIFACTS="$BUILD_ARTIFACTS $OBJECTS"

	# TODO: emit target linking
	emit "`staticlib_fname $STATIC_LIB`: $OBJECTS $EXTRA_DEPS\n"
	emit "\t\$(AR) \$(ARFLAGS) lib$STATIC_LIB.a $OBJECTS\n"
	emit "\n"
done
for DYNAMIC_LIB in $DYNAMIC_LIB_TARGETS; do
	# evaluate library variables
	eval "SOURCES=\${${DYNAMIC_LIB}_SOURCES}"
	OBJECTS="`src2obj $SOURCES`"
	BUILD_SOURCES="$BUILD_SOURCES $SOURCES"
	BUILD_ARTIFACTS="$BUILD_ARTIFACTS $OBJECTS"

	# TODO: emit target linking
done
for SOURCE in $BUILD_SOURCES; do
	emit "`src2obj $SOURCE`: $SOURCE\n"
	emit "\t\$(CC) \$(CFLAGS) -c -o `src2obj $SOURCE` $SOURCE\n"
	emit "\n"
done
emit "clean:\n"
for SUBDIR in $SUBDIRS; do
	emit "\tcd \"$SUBDIR\" && \$(MAKE) clean\n"
done
for ARTIFACT in $BUILD_ARTIFACTS; do
	emit "\trm -f $ARTIFACT\n"
done
for TARGET in $TARGETS; do
	emit "\trm -f $TARGET\n"
done
for STATIC_LIB in $STATIC_LIB_TARGETS; do
	emit "\trm -f `staticlib_fname $STATIC_LIB`\n"
done
for DYNAMIC_LIB in $DYNAMIC_LIB_TARGETS; do
	emit "\trm -f $DYNAMIC_LIB\n"
done
emit "\n"

