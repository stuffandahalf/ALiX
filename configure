#!/bin/sh

#  Copyright (c) 2022 Gregory Norton <gregory.norton@me.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

# This script reads a list of variables from a configuration file
# and produces a posix compliant makefile

# functions to simplify makefile generation
usage() {
	printf "usage: %s [-A architecture] [-B build dir] [-C confname] [-D] [-F kernel format] [-h] [-i install dir] [-j nthreads] [-M machine] [-v+]\n" $1
}

log() {
	if [ $VERBOSE -ge $1 ]; then
		shift 1
		echo "$@" >&2
	fi
}

emit() {
	printf "$@"  >> "$DIR$OUT_MAKEFILE"
}

path_dirs() {
	if [ "$1" ]; then
		PATHS="$1"
	else
		PATHS="$PATH"
	fi
	echo "$PATHS" | sed -e "s/:/\n/g"
}

src2obj() {
	for SRC in $@; do
		printf "$OBJ_DIR$RDIR`printf "$SRC" | sed -e "s/\..*$/\.o /"`"
	done
}

staticlib_fname() {
	for LIB in $@; do
		printf "lib$LIB.a "
	done
}

dynlib_fname() {
	for LIB in $@; do
		printf "lib$LIB.so "
	done
}

ldargs() {
	for LIB in $@; do
		printf "-"
		printf "l $LIB "
	done
	printf "\n"
}

emit_target_deps() {
	for SOURCE in $@; do
		emit "`src2obj $SOURCE`: $SOURCE\n"
		emit "\t\"${CC}\" ${CFLAGS} ${TARGET_CFLAGS} -c -o `src2obj $SOURCE` $SOURCE\n"
		emit "\n"
	done
}

var_name() {
	for F in $@; do
		echo "$F" | sed -e "s/[^a-zA-Z0-9_]/_/g"
	done
}

target_paths() {
	for TARGET in $@; do
		echo "$OBJ_DIR$RDIR$TARGET"
	done
}

# Build Variables
IN_MAKEFILE=make.conf
IN_ADDL_MAKEFILE=make.append.conf
IN_PREDEF_MAKEFILE=make.predef.conf
OUT_MAKEFILE=makefile
SRC_ROOT="`cd \`dirname $0\` && pwd`"
REQUIRED_C_STANDARD="c99"

SUPPORTED_ARCHS="i386 amd64 ppc ppc64 armv6 aarch64 riscv32 riscv64"
i386_ALTNAMES="i386 i486 i586 i686 i86pc 80386 80486 80586 80686"
amd64_ALTNAMES="amd64 x86_64 x86-64"
ppc_ALTNAMES="ppc ppc32 powerpc powerpc32"
ppc64_ALTNAMES="ppc64 powerpc64"
armv6_ALTNAMES="arm32 arm armv6"
aarch64_ALTNAMES="aarch64 arm64"
riscv32_ALTNAMES="riscv32 risc-v riscv risc-v32 rv"
riscv64_ALTNAMES="riscv64 risc-v64 RISC-V rv64"

i386_COMPATIBLE_TOOLCHAINS=amd64
ppc_COMPATIBLE_TOOLCHAINS=ppc64

i386_INCLUDE_ARCH_DIRS="x86"
amd64_INCLUDE_ARCH_DIRS="x86"

if [ -z "$CONFIGURED" ]; then
	TARGET_ARCH=`uname -m`
	export TARGET_ARCH
	VERBOSE=0
	export VERBOSE
	BUILD_PREFIX=""
	export BUILD_PREFIX
	KERNEL_FORMAT=""
	export KERNEL_FORMAT
	OBJ_DIR="$SRC_ROOT/obj"
	export OBJ_DIR
	KERNEL_CONFIG="GENERIC"
	export KERNEL_CONFIG
	DEBUG_BUILD=
	export DEBUG_BUILD
	SYSTEM_VERSION=`cat VERSION 2>/dev/null || git log HEAD -n1 --format="%h"`
	export SYSTEM_VERSION

	#~ OUTPUT_DIR="`basedir "$0"`"
	INSTALL_DIR="$HOME/alix"
	export INSTALL_DIR

	while getopts 'A:B:C:DF:hi:j:M:v' opt; do
		case $opt in
			(A)
				ARCH_ARG=$OPTARG
				TARGET_ARCH=
				;;
			(B) BUILD_DIR=$OPTARG;;
			(C) KERNEL_CONFIG=$OPTARG;;
			(D) DEBUG_BUILD=1;;
			(F) KERNEL_FORMAT=$OPTARG;;
			(h) usage "$0"; exit 1;;
			(i) INSTALL_DIR="$OPTARG";;
			(j)
				if [ -n "$OPTARG" ]; then
					JOB_COUNT="$OPTARG"
					export JOB_COUNT
					MAKE_JOBS="-j$OPTARG"
					export MAKE_JOBS
				else
					echo "-j expects an integer value" >&2
				fi
				;;
			(M) MACHINE="$OPTARG";;
			(o) OBJ_DIR="$OPTARG";;
			(v) VERBOSE=$(($VERBOSE + 1));;
			(?) usage "$0" >&2; exit 1;;
		esac
	done

	# check that selected arch is legal and set preferred name
	for ARCH in $SUPPORTED_ARCHS; do
		eval "ALTNAMES=\$${ARCH}_ALTNAMES"
		for ALTNAME in $ALTNAMES; do
			if [ "$ARCH_ARG" = "$ALTNAME" ]; then
				TARGET_ARCH="$ARCH"
			fi
		done
	done
	if [ -z "$TARGET_ARCH" ]; then
		log 0 "Unsupported architecture \"$ARCH_ARG\""
		exit 1
	fi
	log 0 "TARGETING $TARGET_ARCH"
	eval "INCLUDE_ARCH_DIRS=\"$TARGET_ARCH \$${TARGET_ARCH}_INCLUDE_ARCH_DIRS\""
	export INCLUDE_ARCH_DIRS
	log 1 "Including files for \"$INCLUDE_ARCH_DIRS\""

	if [ $DEBUG_BUILD ]; then
		CFLAGS="-Og -g $CFLAGS"
		LDFLAGS="-Og -g $LDFLAGS"
	else
		CFLAGS="-DNDEBUG=1 $CFLAGS"
	fi

	CONFIGURED=1
	export CONFIGURED
fi
shift $(($OPTIND - 1))

# Configure paths to required tools
if [ -z "$LLVM_PREFIX" ]; then
	LLVM_PREFIX="$OBJ_DIR/tools"
	export LLVM_PREFIX

	NEED_LLVM=1
	export NEED_LLVM
fi
if [ -z "$CC" ]; then
	CC="$LLVM_PREFIX/bin/clang"
	export CC

	# Set C compilation flags
	CFLAGS="--target=$TARGET_ARCH-none-elf -nostdinc -nostdlib -ffreestanding $CFLAGS"
	if [ "$REQUIRED_C_STANDARD" ]; then
		CFLAGS="-std=$REQUIRED_C_STANDARD $CFLAGS"
	fi
	export CFLAGS
fi

if [ -z "$LD" ]; then
	LD="$LLVM_PREFIX/bin/ld.lld"
	export LD
	export LDFLAGS
fi

if [ -z "$AR" ]; then
	AR="$LLVM_PREFIX/bin/llvm-ar"
	export AR

	ARFLAGS="-rvs $ARFLAGS"
	export ARFLAGS
fi

if [ -z "$OBJCOPY" ]; then
	OBJCOPY="$LLVM_PREFIX/bin/llvm-objcopy"
	export OBJCOPY
	export OBJCOPYFLAGS
fi

# Determine current directory
if [ $# -gt 0 ]; then
	_DIR="$1"
	export _DIR
fi

RDIR="$_DIR"
if [ -z "$RDIR" ]; then
	RDIR="/"
fi
DIR="$SRC_ROOT$RDIR"
# import any configuration that should be applied to subdirectories
if [ -f "$DIR$IN_PREDEF_MAKEFILE" ]; then
	. "$DIR$IN_PREDEF_MAKEFILE"
fi

# Lookup subdirectories
SUBDIRS=`ls -d "$DIR"*/ 2> /dev/null`
# Recurse through subdirectories and configure them
if [ $? -eq 0 ]; then
	for SUBDIR in $SUBDIRS; do
		#~ echo "$DIR`basename "$SUBDIR"`"
		log 2 "ENTERING $SUBDIR"
		$0 "$RDIR`basename "$SUBDIR"`/"
		log 2 "LEAVING $SUBDIR"
	done
fi
SUBDIRS=

set -e

# look for makefile configuration file
# if [ -f "$DIR$OUT_MAKEFILE" ]; then
# 	if [ ! -f "$DIR$IN_MAKEFILE" ]; then
# 		exit 0
# 	elif [ "$DIR$IN_MAKEFILE" -ot "$DIR$OUT_MAKEFILE" -a "$0" -ot "$DIR$OUT_MAKEFILE" ]; then
# 		exit 0
# 	fi
# elif [ ! -f "$DIR$IN_MAKEFILE" ]; then
# 	exit 1
# fi

if [ -f "$DIR$IN_MAKEFILE" ]; then
	IN_FILES="$DIR$IN_MAKEFILE"
fi
for ARCH_DIR in $INCLUDE_ARCH_DIRS; do
	if [ -f "$DIR/$ARCH_DIR$IN_ADDL_MAKEFILE" ]; then
		IN_FILES="$IN_FILES $DIR$ARCH_DIR/$IN_ADDL_MAKEFILE"
	elif [ -f "$DIR/$ARCH_DIR.$IN_ADDL_MAKEFILE" ]; then
		IN_FILES="$IN_FILES $DIR$ARCH_DIR.$IN_ADDL_MAKEFILE"
	fi
done

REBUILD=false
if [ -f "$DIR$OUT_MAKEFILE" ]; then
	if [ "$IN_FILES" != "" ]; then
		for F in $IN_FILES; do
			if [ "$IN_FILE" -nt "$DIR$OUT_MAKEFILE" -o "$0" -nt "$DIR$OUT_MAKEFILE" ]; then
				REBUILD=true
				break
			fi
		done
		if ! $REBUILD; then
			exit 0
		fi
	else
		exit 0
	fi
elif [ "$IN_FILES" == "" ]; then
	exit 1
fi

# Import directory make variables as shell variables
for MF in $IN_FILES; do
	log 1 "IMPORT build config from \"$MF\""
	. "$MF"
done


for F in $CONFIG_FILES; do
	eval "OUTFILE=\"\$`var_name $F`_OUTFILE\""
	log 0 "CREATING $DIR$OUTFILE"
	eval "echo \"`cat "$DIR$F"`\"" > "$DIR$OUTFILE"
done

# If local make config file set NO_MAKE, then skip makefile generation
if [ $NO_MAKE ] && $NO_MAKE; then
	exit 0
fi

SUBDIR_TARGETS=
for SUBDIR in $SUBDIRS; do
	SUBDIR_TARGETS="$SUBDIR.dir $SUBDIR_TARGETS"
done

log 0 "CREATING $DIR$OUT_MAKEFILE"

# create output file
if [ -e "$DIR$OUT_MAKEFILE" ]; then
	rm -f "$DIR$OUT_MAKEFILE"
fi
touch "$DIR$OUT_MAKEFILE"
BUILD_ARTIFACTS=

# write output file
emit ".POSIX:\n"
emit "\n"
emit "all: build.dir subdirs `target_paths $TARGETS \`staticlib_fname $STATIC_LIB_TARGETS\` \`dynlib_fname $DYNAMIC_LIB_TARGETS\``\n"
emit "\n"
emit "subdirs: $SUBDIR_TARGETS"
emit "\n\n"
for SUBDIR in $SUBDIRS; do
	eval "SUBDIR_DEPS=\${`var_name ${SUBDIR}`_DEPENDENCIES}"
	emit "$SUBDIR.dir: $SUBDIR_DEPS $SUBDIR\n"
	emit "\tcd \"$SUBDIR\" && \$(MAKE) $MAKE_JOBS all\n"
	emit "\n"
done
for TARGET in $TARGETS; do
	# evaluate target variables
	TARGET_VAR=`var_name $TARGET`
	eval "TARGET_EXTRA_DEPS=\${${TARGET_VAR}_EXTRA_DEPENDENCIES}"
	eval "TARGET_SOURCES=\${${TARGET_VAR}_SOURCES}"
	eval "TARGET_CFLAGS=\${${TARGET_VAR}_CFLAGS}"
	eval "TARGET_LDFLAGS=\${${TARGET_VAR}_LDFLAGS}"
	eval "TARGET_LIBS=\${${TARGET_VAR}_LIBS}"
	eval "TARGET_OUTPUT_FORMAT=\${${TARGET_VAR}_OUTPUT_FORMAT}"
	eval "LIB_LOOKUP_DIRS=\${${TARGET_VAR}_LIB_LOOKUP_DIRS}"
	LIB_LOOKUP_DIRS="`target_paths $LIB_LOOKUP_DIRS`"
	TARGET_ARTIFACTS="$TARGET_ARTIFACTS $TARGET"
	if [ "$TARGET_OUTPUT_FORMAT" -a "$TARGET_OUTPUT_FORMAT" != "elf" ]; then
		TARGET_OUTPUT_FORMAT_DIFF=1
		TARGET_ARTIFACTS="$TARGET_ARTIFACTS $TARGET.elf"
	fi
	OBJECTS="`src2obj $TARGET_SOURCES`"
	#BUILD_SOURCES="$BUILD_SOURCES $TARGET_SOURCES"
	BUILD_ARTIFACTS="$BUILD_ARTIFACTS $OBJECTS"

#	emit "$TARGET: subdirs $TARGET_LIBS $OBJECTS $TARGET_EXTRA_DEPS\n"
	emit "`target_paths $TARGET`"
	if [ "$TARGET_OUTPUT_FORMAT_DIFF" ]; then
		emit ".elf"
	fi
	emit ": subdirs $TARGET_LIBS $OBJECTS $TARGET_EXTRA_DEPS\n"
	emit "\t\"${LD}\" $LDFLAGS $TARGET_LDFLAGS \$(ALIX_LDFLAGS)"
	for LIB_LOOKUP_DIR in $LIB_LOOKUP_DIRS; do
		emit " -L$LIB_LOOKUP_DIR"
	done
	emit " -o`target_paths $TARGET`"
	if [ "$TARGET_OUTPUT_FORMAT_DIFF" ]; then
		emit ".elf"
	fi
	emit " $OBJECTS"
	for LIB in $TARGET_LIBS; do
		emit " -l$LIB"
	done
	emit "\n\n"
	if [ "$TARGET_OUTPUT_FORMAT_DIFF" ]; then
		emit "`target_paths $TARGET`: `target_paths $TARGET.elf`\n"
		emit "\t\"${OBJCOPY}\" $OBJCOPYFLAGS -O $TARGET_OUTPUT_FORMAT `target_paths $TARGET.elf $TARGET | tr "\n" " "`\n\n"
	fi
	emit_target_deps $TARGET_SOURCES
done
for STATIC_LIB in $STATIC_LIB_TARGETS; do
	# evaluate library variables
	TARGET_VAR=`var_name "$STATIC_LIB"`
	eval "TARGET_SOURCES=\${${TARGET_VAR}_SOURCES}"
	eval "TARGET_CFLAGS=\${${TARGET_VAR}_CFLAGS}"
	eval "TARGET_ARFLAGS=\${${TARGET_VAR}_ARFLAGS}"
	OBJECTS="`src2obj $TARGET_SOURCES`"
	BUILD_ARTIFACTS="$BUILD_ARTIFACTS $OBJECTS"

	# TODO: emit target linking
	emit "`target_paths \`staticlib_fname $STATIC_LIB\``: subdirs $OBJECTS $EXTRA_DEPS\n"
	emit "\t\"${AR}\" ${ARFLAGS} ${TARGET_ARFLAGS} \$(ALIX_ARFLAGS) \"`target_paths \`staticlib_fname \"$STATIC_LIB\"\``\" $OBJECTS\n"
	emit "\n"
	emit_target_deps $TARGET_SOURCES
done
for DYNAMIC_LIB in $DYNAMIC_LIB_TARGETS; do
	# evaluate library variables
	TARGET_VAR=`var_name "$DYNAMIC_LIB"`
	eval "TARGET_SOURCES=\${${TARGET_VAR}_SOURCES}"
	eval "TARGET_CFLAGS=\${${TARGET_VAR}_CFLAGS}"
	eval "TARGET_LDFLAGS=\${${TARGET_VAR}_LDFLAGS}"
	OBJECTS="`src2obj $TARGET_SOURCES`"
	BUILD_ARTIFACTS="$BUILD_ARTIFACTS $OBJECTS"

	# TODO: emit target linking
	emit "`target_paths \`dynlib_fname \"$DYNAMIC_LIB\"\``: subdirs $OBJECTS $EXTRA_DEPTS\n"
	emit "\t\"${LD}\" $LDFLAGS \$(ALIX_LDFLAGS) -shared -o \"`target_paths \`dynlib_fname \"$DYNAMIC_LIB\"\``\" $OBJECTS\n"
	emit "\n"
	emit_target_deps $TARGET_SOURCES
done
emit "install: all\n"
for D in $SUBDIRS; do
	emit "\tcd \"$D\" && \$(MAKE) install\n"
done
for TARGET in $TARGETS; do
	TARGET_VAR=`var_name "$TARGET"`
	eval "TARGET_INSTALL_DIR=\"\$${TARGET_VAR}_INSTALL_DIR\""
	if [ ! -z "$TARGET_INSTALL_DIR" ]; then
		emit "\tmkdir -p \"$INSTALL_DIR$TARGET_INSTALL_DIR\"\n"
		emit "\tinstall \"`target_paths $TARGET`\" \"$INSTALL_DIR$TARGET_INSTALL_DIR\"\n"
	fi
done
emit "\n"
emit "build.dir:\n"
emit "\tmkdir -p \"$OBJ_DIR$RDIR\"\n"
for BUILD_DIR in $BUILD_DIRS; do
	emit "\tmkdir -p \"$OBJ_DIR$RDIR$BUILD_DIR\"\n"
done
emit "\n"
emit "clean:\n"
for SUBDIR in $SUBDIRS; do
	emit "\tcd \"$SUBDIR\" && \$(MAKE) clean\n"
done
for ARTIFACT in $BUILD_ARTIFACTS; do
	emit "\trm -f \"$ARTIFACT\"\n"
done
for TARGET in `target_paths $TARGET_ARTIFACTS`; do
	emit "\trm -f \"$TARGET\"\n"
done
for STATIC_LIB in $STATIC_LIB_TARGETS; do
	emit "\trm -f \"`target_paths \`staticlib_fname $STATIC_LIB\``\"\n"
done
for DYNAMIC_LIB in $DYNAMIC_LIB_TARGETS; do
	emit "\trm -f \"`target_paths \`dynlib_fname $DYNAMIC_LIB\``\"\n"
done
emit "\trm -rf \"$OBJ_DIR$RDIR\"\n"
for BUILD_DIR in $BUILD_DIRS; do
	emit "\trm -rf \"$OBJ_DIR$RDIR$BUILD_DIR\"\n"
done
emit "\n"
